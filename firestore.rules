rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers ---------- */
    function isSignedIn() {
      return request.auth != null;
    }

    // ensure the doc’s uid matches the signed-in user
    function creatingAsSelf() {
      return isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // prevent uid from being changed on updates
    function ownershipUnchanged() {
      return !('uid' in request.resource.data) ||
             request.resource.data.uid == resource.data.uid;
    }

    // lightweight profanity guard (server-side) – expand as needed
    function isClean(str) {
      return !(str.matches('(?i).*(\\b(fuck|shit|bitch|asshole|nigger|retard|cunt)\\b).*'));
    }

    function cleanOptional(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == null ||
             isClean(request.resource.data[field]);
    }

    /* =========================================================
       users/{uid}
    ========================================================== */
    match /users/{uid} {
      // Only you can read your user profile
      allow read:   if isSignedIn() && request.auth.uid == uid;

      // Create/update/delete only yourself; uid must match
      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid);

      allow update, delete: if isSignedIn()
                            && request.auth.uid == uid
                            && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
    }

    /* =========================================================
       pantryItems/{id}
    ========================================================== */
    match /pantryItems/{id} {
      // Read only your own pantry
      allow read: if isSignedIn() && resource.data.uid == request.auth.uid;

      // New docs must be created as yourself
      allow create: if creatingAsSelf();

      // Update must be by owner and must not change uid
      allow update: if isSignedIn()
                    && resource.data.uid == request.auth.uid
                    && ownershipUnchanged();

      // Delete by owner
      allow delete: if isSignedIn()
                    && resource.data.uid == request.auth.uid;
    }

    /* =========================================================
       recipes/{id} (+photos subcollection)
    ========================================================== */
    match /recipes/{id} {
      // Public read
      allow read: if true;

      // Create: must set uid == auth.uid
      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid;

      // Update/Delete: only owner; uid immutable
      allow update, delete: if isSignedIn()
                            && resource.data.uid == request.auth.uid
                            && ownershipUnchanged();

      // photos subcollection (gallery metadata docs)
      match /photos/{pid} {
        allow read: if true;

        // Only the recipe owner can add/remove photo docs
        allow create, delete: if isSignedIn()
                               && get(/databases/$(database)/documents/recipes/$(id)).data.uid == request.auth.uid;

        // We don't update photo docs; add/delete only
        allow update: if false;
      }
    }

    /* =========================================================
       users/{uid}/favoriteRecipes/{rid}
    ========================================================== */
    match /users/{uid}/favoriteRecipes/{rid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow create, delete: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
    }

    /* =========================================================
       posts/{postId} (+likes, +reposts, +comments)
    ========================================================== */
    match /posts/{postId} {
      allow read: if true; // public

      // Create: must set uid == auth.uid
      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid
                    // (optional) keep post text clean if provided
                    && cleanOptional('text');

      // Update/Delete: only post owner
      allow update, delete: if isSignedIn()
                            && resource.data.uid == request.auth.uid
                            && ownershipUnchanged();

      /* ---------- likes (toggle per user) ---------- */
      match /likes/{uid} {
        allow read: if true;
        allow create, delete: if isSignedIn() && request.auth.uid == uid;
        allow update: if false;
      }

      /* ---------- reposts (toggle per user) ---------- */
      match /reposts/{uid} {
        allow read: if true;
        allow create, delete: if isSignedIn() && request.auth.uid == uid;
        allow update: if false;
      }

/* ---------- comments ---------- */
match /comments/{cid} {
  allow read: if true;

  // helper: text is optional, must be a string ≤ 25k
  function textOk() {
    return !('text' in request.resource.data)
           || request.resource.data.text == null
           || (
                request.resource.data.text is string
                && request.resource.data.text.size() <= 25000
                && isClean(request.resource.data.text) // keep your profanity guard
              );
  }

  // Create: only the author; text constraints apply
  allow create: if isSignedIn()
                && request.resource.data.uid == request.auth.uid
                && textOk();

  // Update: comment owner OR post owner; keep uid immutable and text constraints
  allow update: if isSignedIn()
                && (
                     request.auth.uid == resource.data.uid ||
                     request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                   )
                && (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid)
                && textOk();

  // Delete: comment owner OR post owner (no need to reference request.resource.data)
  allow delete: if isSignedIn()
                && (
                     request.auth.uid == resource.data.uid ||
                     request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                   );
}

    }

    /* =========================================================
       usernames/{uname}
    ========================================================== */
    match /usernames/{uname} {
      allow read: if true;

      // Reserve a username once if not taken; must map to your uid
      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/usernames/$(uname))
                    && request.resource.data.uid == request.auth.uid;

      // No updates/deletes to username mapping
      allow update, delete: if false;
    }
  }
}
