rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- helpers ---------- */
    function isSignedIn()         { return request.auth != null; }
    function creatingAsSelf()     { return isSignedIn() && request.resource.data.uid == request.auth.uid; }
    function ownershipUnchanged() { return !('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid; }

    function isClean(str) {
      return !(str.matches('(?i).*(\\b(fuck|shit|bitch|asshole|nigger|retard|cunt|faggot)\\b).*'));
    }
    function cleanOptional(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == null ||
             isClean(request.resource.data[field]);
    }
    function textOk() {
      return !('text' in request.resource.data)
             || request.resource.data.text == null
             || (
                  request.resource.data.text is string
                  && request.resource.data.text.size() <= 25000
                  && isClean(request.resource.data.text)
                );
    }

    function isStr(v, max)  { return v is string && v.size() <= max; }
    function isBool(v)      { return v is bool; }
    function isOneOf(v, xs) { return xs.hasAny([v]); }

    function listAllowedStrings(arr, allowed, maxLen) {
      return (arr is list) && arr.size() > 0 && arr.size() <= maxLen && arr.hasOnly(allowed);
    }

    function validUserWrite() {
      let new = request.resource.data;

      let baseOk =
        (new.username == null || new.username.matches('^[a-z0-9._-]{3,20}$')) &&
        (new.firstName == null || isStr(new.firstName, 100)) &&
        (new.lastName  == null || isStr(new.lastName,  100));

      let prefs = new.prefs;
      let prefsOk =
        (prefs == null) ||
        (
          (prefs.units == null || isOneOf(prefs.units, ["metric","imperial"])) &&
          (prefs.theme == null || isOneOf(prefs.theme, ["system","light","dark"])) &&
          (prefs.emailNotifications == null || isBool(prefs.emailNotifications)) &&
          (
            prefs.nav == null ||
            (
              (prefs.nav.placement == null || isOneOf(prefs.nav.placement, ["header","top","bottom","floating"])) &&
              (prefs.nav.accent    == null || isStr(prefs.nav.accent, 64)) &&
              (prefs.nav.icon      == null || isStr(prefs.nav.icon,   64)) &&
              (prefs.nav.compact   == null || isBool(prefs.nav.compact)) &&
              (prefs.nav.glow      == null || isBool(prefs.nav.glow)) &&
              (
                prefs.nav.order == null ||
                listAllowedStrings(
                  prefs.nav.order,
                  ["dashboard","pantry","recipes","fitness","profile"],
                  5
                )
              )
            )
          )
        );

      return baseOk && prefsOk;
    }

    /* ---------- public profile facade ---------- */
    match /usersPublic/{uid} {
      allow read: if true;
      allow create, update: if isSignedIn() && request.auth.uid == uid;
      allow delete: if isSignedIn() && request.auth.uid == uid;
    }

    /* ---------- users (doc) ---------- */
    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;

      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid)
                    && validUserWrite();

      allow update: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid)
                    && validUserWrite();

      allow delete: if isSignedIn() && request.auth.uid == uid;

      match /{sub=**} {
        allow read, create, update, delete: if isSignedIn() && request.auth.uid == uid;
      }
    }

    /* ---------- pantryItems (OWNER-ONLY) ---------- */
    match /pantryItems/{id} {
      allow read:    if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create:  if creatingAsSelf();
      allow update:  if isSignedIn() && resource.data.uid == request.auth.uid && ownershipUnchanged();
      allow delete:  if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    /* ---------- consumptionLogs (OWNER-ONLY) ---------- */
    match /consumptionLogs/{logId} {
      allow read:   if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if creatingAsSelf();
      allow update, delete: if false;
    }

    /* ---------- recipes (+ photos) ---------- */
    match /recipes/{id} {
      allow read: if true;

      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;

      allow update: if isSignedIn()
                    && (
                         resource.data.uid == request.auth.uid ||
                         (resource.data.author != null && resource.data.author.uid == request.auth.uid)
                       )
                    && ownershipUnchanged();

      allow delete: if isSignedIn()
                    && (
                         resource.data.uid == request.auth.uid ||
                         (resource.data.author != null && resource.data.author.uid == request.auth.uid)
                       );

      match /photos/{pid} {
        allow read: if true;
        allow create, delete: if isSignedIn()
                               && (
                                    get(/databases/$(database)/documents/recipes/$(id)).data.uid == request.auth.uid
                                 || (get(/databases/$(database)/documents/recipes/$(id)).data.author != null
                                     && get(/databases/$(database)/documents/recipes/$(id)).data.author.uid == request.auth.uid)
                               );
        allow update: if false;
      }
    }

    /* ---------- fav recipes ---------- */
    match /users/{uid}/favoriteRecipes/{rid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow create, delete: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
    }

    /* ---------- posts (+likes, +reposts, +comments [+replies], +reports) ---------- */
    match /posts/{postId} {
      allow read: if true;

      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid
                    && cleanOptional('text');

      function canBump(field) {
        return (field in request.resource.data)
               && (field in resource.data)
               && (request.resource.data[field] is number)
               && (resource.data[field] is number)
               && (request.resource.data[field] >= resource.data[field] - 1)
               && (request.resource.data[field] <= resource.data[field] + 1);
      }
      function onlyCountersChanged() {
        let changed = request.resource.data.diff(resource.data).changedKeys();
        return changed.hasOnly(["likes","reposts"]);
      }

      allow update: if isSignedIn()
                    && (
                         (resource.data.uid == request.auth.uid && ownershipUnchanged())
                         ||
                         (onlyCountersChanged()
                          && (("likes" in request.resource.data)   ? canBump("likes")   : true)
                          && (("reposts" in request.resource.data) ? canBump("reposts") : true))
                       );

      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;

      match /likes/{uid} {
        allow read: if true;
        // Require the like doc id to be the auth uid, and ensure parent exists
        allow create, delete: if isSignedIn()
                              && request.auth.uid == uid
                              && exists(/databases/$(database)/documents/posts/$(postId));
        allow update: if false;
      }

      match /reposts/{uid} {
        allow read: if true;
        allow create, delete: if isSignedIn() && request.auth.uid == uid;
        allow update: if false;
      }

      match /comments/{cid} {
        allow read: if true;

        allow create: if isSignedIn()
                      && request.resource.data.uid == request.auth.uid
                      && textOk();

        allow update: if isSignedIn()
                      && (
                           request.auth.uid == resource.data.uid ||
                           request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                         )
                      && (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid)
                      && textOk();

        allow delete: if isSignedIn()
                      && (
                           request.auth.uid == resource.data.uid ||
                           request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                         );

        match /reposts/{uid} {
          allow read: if true;
          allow create, delete: if isSignedIn() && request.auth.uid == uid;
          allow update: if false;
        }

        match /replies/{rid} {
          allow read: if true;

          allow create: if isSignedIn()
                        && request.resource.data.uid == request.auth.uid
                        && textOk();

          allow update: if isSignedIn()
                        && (
                             request.auth.uid == resource.data.uid ||
                             request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                           )
                        && (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid)
                        && textOk();

          allow delete: if isSignedIn()
                        && (
                             request.auth.uid == resource.data.uid ||
                             request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                           );

          match /reposts/{uid} {
            allow read: if true;
            allow create, delete: if isSignedIn() && request.auth.uid == uid;
            allow update: if false;
          }
        }
      }

      match /reports/{uid} {
        allow read: if false;
        allow create: if isSignedIn() && request.auth.uid == uid;
        allow update, delete: if false;
      }
    }

    /* ---------- usernames (renames supported client-side) ---------- */
    match /usernames/{uname} {
      allow read: if true;

      // Reserve or re-assert a username mapping if it is free or already owned by the caller
      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid
                    && (
                         !exists(/databases/$(database)/documents/usernames/$(uname))
                         || get(/databases/$(database)/documents/usernames/$(uname)).data.uid == request.auth.uid
                       );

      // Permit idempotent updates when the caller already owns the entry
      allow update: if isSignedIn()
                    && resource.data.uid == request.auth.uid
                    && request.resource.data.uid == request.auth.uid;

      // Let the owner free their previous username during a rename
      allow delete: if isSignedIn()
                    && resource.data.uid == request.auth.uid;
    }

    /* ---------- default deny ---------- */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
