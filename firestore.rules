// firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers ---------- */
    function isSignedIn() {
      return request.auth != null;
    }

    // ensure the doc’s uid matches the signed-in user
    function creatingAsSelf() {
      return isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // prevent uid from being changed on updates
    function ownershipUnchanged() {
      return !('uid' in request.resource.data) ||
             request.resource.data.uid == resource.data.uid;
    }

    // lightweight profanity guard (server-side) – expand as needed
    function isClean(str) {
      return !(str.matches('(?i).*(\\b(fuck|shit|bitch|asshole|nigger|retard|cunt)\\b).*'));
    }

    function cleanOptional(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == null ||
             isClean(request.resource.data[field]);
    }

    // Comments: "text" field optional, must be string ≤ 25k and clean
    function textOk() {
      return !('text' in request.resource.data)
             || request.resource.data.text == null
             || (
                  request.resource.data.text is string
                  && request.resource.data.text.size() <= 25000
                  && isClean(request.resource.data.text)
                );
    }

    /* =========================================================
       users/{uid}
    ========================================================== */
    match /users/{uid} {
      // Only you can read your user profile
      allow read:   if isSignedIn() && request.auth.uid == uid;

      // Create/update/delete only yourself; uid must match
      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid);

      allow update, delete: if isSignedIn()
                            && request.auth.uid == uid
                            && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
    }

    /* =========================================================
       pantryItems/{id}
    ========================================================== */
    /* ---------- pantryItems/{id} ---------- */
match /pantryItems/{id} {
  // Consider it expired if expiresAt exists and is in the past
  function isExpired() {
    return resource.data.expiresAt != null
           && resource.data.expiresAt < request.time;
  }

  // Read only your own pantry
  allow read: if isSignedIn() && resource.data.uid == request.auth.uid;

  // New docs must be created as yourself
  allow create: if creatingAsSelf();

  // Update must be by owner, uid immutable, and NOT expired
  allow update: if isSignedIn()
                && resource.data.uid == request.auth.uid
                && ownershipUnchanged()
                && !isExpired();

  // Delete by owner (even if expired)
  allow delete: if isSignedIn()
                && resource.data.uid == request.auth.uid;
}


/* =========================================================
   recipes/{id} (+photos subcollection)
========================================================== */
match /recipes/{id} {
  allow read: if true;

  // Create: must set uid == auth.uid
  allow create: if isSignedIn()
                && request.resource.data.uid == request.auth.uid;

  // Update: only owner; uid must not change
  allow update: if isSignedIn()
                && (
                     resource.data.uid == request.auth.uid
                  || resource.data.author.uid == request.auth.uid  // <-- legacy support
                )
                && ownershipUnchanged();

  // Delete: only owner (legacy allowed via author.uid)
  allow delete: if isSignedIn()
                && (
                     resource.data.uid == request.auth.uid
                  || resource.data.author.uid == request.auth.uid  // <-- legacy support
                );

  // photos subcollection (gallery metadata docs)
  match /photos/{pid} {
    allow read: if true;

    // Only recipe owner can add/remove photo docs (supports legacy)
    allow create, delete: if isSignedIn()
                           && (
                                get(/databases/$(database)/documents/recipes/$(id)).data.uid == request.auth.uid
                             || get(/databases/$(database)/documents/recipes/$(id)).data.author.uid == request.auth.uid
                           );

    // No updates to photo docs
    allow update: if false;
  }
}

    /* =========================================================
       users/{uid}/favoriteRecipes/{rid}
    ========================================================== */
    match /users/{uid}/favoriteRecipes/{rid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow create, delete: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
    }

    /* =========================================================
       posts/{postId} (+likes, +reposts, +comments)
    ========================================================== */
    match /posts/{postId} {
      // Public read
      allow read: if true;

      // Create: must set uid == auth.uid; optional "text" cleanliness
      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid
                    && cleanOptional('text');

      // Update: only owner; uid immutable
      allow update: if isSignedIn()
                    && resource.data.uid == request.auth.uid
                    && ownershipUnchanged();

      // Delete: only owner (don't reference request.resource here)
      allow delete: if isSignedIn()
                    && resource.data.uid == request.auth.uid;

      /* ---------- likes ---------- */
      match /likes/{uid} {
        allow read: if true;
        // user can toggle their own like; post owner may delete for cleanup
        allow create, delete: if isSignedIn() && (
          request.auth.uid == uid ||
          request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
        );
        allow update: if false;
      }

      /* ---------- reposts ---------- */
      match /reposts/{uid} {
        allow read: if true;
        // user can toggle their own repost; post owner may delete for cleanup
        allow create, delete: if isSignedIn() && (
          request.auth.uid == uid ||
          request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
        );
        allow update: if false;
      }

      /* ---------- comments (nested under posts) ---------- */
      match /comments/{cid} {
        allow read: if true;

        // Author creates their own comment; enforce 25k cap + profanity check
        allow create: if isSignedIn()
                      && request.resource.data.uid == request.auth.uid
                      && textOk();

        // Update: comment owner OR post owner; uid immutable; keep 25k cap
        allow update: if isSignedIn()
                      && (
                           request.auth.uid == resource.data.uid ||
                           request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                         )
                      && (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid)
                      && textOk();

        // Delete: comment owner OR post owner
        allow delete: if isSignedIn()
                      && (
                           request.auth.uid == resource.data.uid ||
                           request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                         );
      }
    }

    /* =========================================================
       usernames/{uname}
    ========================================================== */
    match /usernames/{uname} {
      allow read: if true;

      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/usernames/$(uname))
                    && request.resource.data.uid == request.auth.uid;

      allow update, delete: if false;
    }
  }
}
