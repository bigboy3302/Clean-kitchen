rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers ---------- */
    function isSignedIn() {
      return request.auth != null;
    }

    // ensure the docâ€™s uid matches the signed-in user
    function creatingAsSelf() {
      return isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // prevent uid from being changed on updates
    function ownershipUnchanged() {
      return !('uid' in request.resource.data) ||
             request.resource.data.uid == resource.data.uid;
    }

    // lightweight profanity guard (server-side)
    // NOTE: this is basic; you can extend the regex.
    function isClean(str) {
      // Lowercase the string for matching
      return !(str.matches('(?i).*(\\b(fuck|shit|bitch|asshole|nigger|retard|cunt)\\b).*'));
    }

    function cleanOptional(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == null ||
             isClean(request.resource.data[field]);
    }

    /* ---------- users/{uid} ---------- */
    match /users/{uid} {
      allow read:   if isSignedIn() && request.auth.uid == uid;
      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
      allow update, delete: if isSignedIn()
                            && request.auth.uid == uid
                            && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
    }

    /* ---------- pantryItems/{id} ---------- */
    match /pantryItems/{id} {
      allow read:   if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if creatingAsSelf();
      allow update, delete: if isSignedIn()
                            && resource.data.uid == request.auth.uid
                            && ownershipUnchanged();
    }

    /* ---------- recipes/{id} ---------- */
    // Public read; any signed-in user may create their own clean recipe
    match /recipes/{id} {
      allow read: if true;

      allow create: if creatingAsSelf()
        && ('title' in request.resource.data) && request.resource.data.title is string
        && (size(request.resource.data.title) > 0) && (size(request.resource.data.title) <= 120)
        && cleanOptional('title')
        && cleanOptional('description')
        && cleanOptional('steps');

      allow update, delete: if isSignedIn()
                            && resource.data.uid == request.auth.uid
                            && ownershipUnchanged()
                            && cleanOptional('title')
                            && cleanOptional('description')
                            && cleanOptional('steps');
    }

    /* ---------- posts/{id} ---------- */
    // Public read; any signed-in user can create their own clean post
    match /posts/{id} {
      allow read: if true;

      allow create: if creatingAsSelf()
        && cleanOptional('text');

      allow update, delete: if isSignedIn()
                            && resource.data.uid == request.auth.uid
                            && ownershipUnchanged()
                            && cleanOptional('text');
    }

    /* ---------- usernames/{uname} ---------- */
    match /usernames/{uname} {
      allow read: if true;
      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/usernames/$(uname))
                    && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
