rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers ---------- */
    function isSignedIn() {
      return request.auth != null;
    }

    // ensure the doc’s uid matches the signed-in user
    function creatingAsSelf() {
      return isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // prevent uid from being changed on updates
    function ownershipUnchanged() {
      return !('uid' in request.resource.data) ||
             request.resource.data.uid == resource.data.uid;
    }

    // lightweight profanity guard (server-side)
    // NOTE: this is basic; you can extend the regex.
    function isClean(str) {
      // Lowercase the string for matching
      return !(str.matches('(?i).*(\\b(fuck|shit|bitch|asshole|nigger|retard|cunt)\\b).*'));
    }

    function cleanOptional(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == null ||
             isClean(request.resource.data[field]);
    }

    /* ---------- users/{uid} ---------- */
    match /users/{uid} {
      allow read:   if isSignedIn() && request.auth.uid == uid;
      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
      allow update, delete: if isSignedIn()
                            && request.auth.uid == uid
                            && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
    }

    /* ---------- pantryItems/{id} ---------- */
    match /pantryItems/{id} {
      allow read:   if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if creatingAsSelf();
      allow update, delete: if isSignedIn()
                            && resource.data.uid == request.auth.uid
                            && ownershipUnchanged();
    }

    /* ---------- recipes/{id} ---------- */
    // Everyone can READ; only owner can write
    match /recipes/{id} {
      allow read: if true;
      allow create: if creatingAsSelf();
      allow update, delete: if isOwnerField() && ownershipUnchanged();
    }

/* ---------- posts/{postId} and subcollections ---------- */
match /posts/{postId} {
  allow read: if true; // publiski
  allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
  allow update, delete: if request.auth != null && resource.data.uid == request.auth.uid;

  // likes (toggle per user)
  match /likes/{uid} {
    allow read: if true;
    allow create, delete: if request.auth != null && request.auth.uid == uid;
    allow update: if false;
  }

  // reposts (toggle per user) — bez jauna posta veidošanas
  match /reposts/{uid} {
    allow read: if true;
    allow create, delete: if request.auth != null && request.auth.uid == uid;
    allow update: if false;
  }

  // comments
  match /comments/{cid} {
    allow read: if true;
    // var komentu izveidot tikai pats autors
    allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
    // dzēst/rediģēt – vai nu pats autors, vai posta īpašnieks
    allow update, delete: if request.auth != null &&
      (request.auth.uid == resource.data.uid || request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid);
  }
}

    /* ---------- usernames/{uname} ---------- */
    match /usernames/{uname} {
      allow read: if true;
      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/usernames/$(uname))
                    && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
