rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers ---------- */
    function isSignedIn() {
      return request.auth != null;
    }

    // Existing doc is owned by current user
    function isOwnerField() {
      return isSignedIn() && resource.data.uid == request.auth.uid;
    }

    // Incoming (new) doc sets uid to current user
    function creatingAsSelf() {
      return isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // For updates: do not allow changing the uid field
    function ownershipUnchanged() {
      return !('uid' in request.resource.data) ||
             request.resource.data.uid == resource.data.uid;
    }

    /* ---------- users/{uid} ---------- */
    match /users/{uid} {
      allow read:   if isSignedIn() && request.auth.uid == uid;

      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid);

      allow update, delete: if isSignedIn()
                            && request.auth.uid == uid
                            && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
    }

    /* ---------- fitnessProfiles/{uid} ---------- */
    match /fitnessProfiles/{uid} {
      allow read:   if isSignedIn() && request.auth.uid == uid;

      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid);

      allow update, delete: if isSignedIn()
                            && request.auth.uid == uid
                            && (!('uid' in request.resource.data) || request.resource.data.uid == uid);
    }

    /* ---------- pantryItems/{id} ---------- */
    // Many docs per user; each doc MUST have a 'uid' field of the owner
    match /pantryItems/{id} {
      // Read passes per-document; only docs with resource.data.uid == auth.uid are readable
      allow read: if isOwnerField();

      // Create only for yourself
      allow create: if creatingAsSelf();

      // Update/Delete only if owned and owner isn't changed
      allow update, delete: if isOwnerField() && ownershipUnchanged();
    }

    /* ---------- recipes/{id} ---------- */
    // Public read; writes require ownership via uid field
    match /recipes/{id} {
      allow read: if true;

      allow create: if creatingAsSelf();

      allow update, delete: if isOwnerField() && ownershipUnchanged();
    }

    /* ---------- usernames/{uname} ---------- */
    // Public read; append-only reservations { uid, reservedAt }
    match /usernames/{uname} {
      allow read: if true;

      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/usernames/$(uname))
                    && request.resource.data.uid == request.auth.uid;

      allow update, delete: if false;
    }
  }
}
