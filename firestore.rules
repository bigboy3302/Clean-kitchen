rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------- Helpers (expression-only) ---------- */
    function isSignedIn() {
      return request.auth != null;
    }

    function creatingAsSelf() {
      return isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    function ownershipUnchanged() {
      return !('uid' in request.resource.data) ||
             request.resource.data.uid == resource.data.uid;
    }

    function isClean(str) {
      return !(str.matches('(?i).*(\\b(fuck|shit|bitch|asshole|nigger|retard|cunt)\\b).*'));
    }

    function cleanOptional(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == null ||
             isClean(request.resource.data[field]);
    }

    function textOk() {
      return !('text' in request.resource.data)
             || request.resource.data.text == null
             || (
                  request.resource.data.text is string
                  && request.resource.data.text.size() <= 25000
                  && isClean(request.resource.data.text)
                );
    }

    // small validators for prefs/nav
    function isStr(v, max) { return v is string && v.size() <= max; }
    function isBool(v)     { return v is bool; }
    function isOneOf(v, list) { return list.hasAny([v]); }

    // for arrays: only allowed strings and length cap
    function listAllowedStrings(arr, allowed, maxLen) {
      return (arr is list)
          && arr.size() > 0
          && arr.size() <= maxLen
          && arr.hasOnly(allowed);
    }

    // Validate users.* payload including prefs.nav (expression-only)
    function validUserWrite() {
      let new = request.resource.data;

      let baseOk =
        (new.username == null || new.username.matches('^[a-z0-9._-]{3,20}$')) &&
        (new.firstName == null || isStr(new.firstName, 100)) &&
        (new.lastName  == null || isStr(new.lastName,  100));

      let prefs = new.prefs;
      let prefsOk =
        (prefs == null) ||
        (
          (prefs.units == null || isOneOf(prefs.units, ["metric","imperial"])) &&
          (prefs.theme == null || isOneOf(prefs.theme, ["system","light","dark"])) &&
          (prefs.emailNotifications == null || isBool(prefs.emailNotifications)) &&

          // navbar prefs
          (
            prefs.nav == null ||
            (
              (prefs.nav.placement == null || isOneOf(prefs.nav.placement, ["header","top","bottom","floating"])) &&
              (prefs.nav.accent    == null || isStr(prefs.nav.accent, 64)) &&
              (prefs.nav.icon      == null || isStr(prefs.nav.icon,   64)) &&
              (prefs.nav.compact   == null || isBool(prefs.nav.compact)) &&
              (prefs.nav.glow      == null || isBool(prefs.nav.glow)) &&
              (
                prefs.nav.order == null ||
                listAllowedStrings(
                  prefs.nav.order,
                  ["dashboard","pantry","recipes","fitness","profile"],
                  5
                )
              )
            )
          )
        );

      return baseOk && prefsOk;
    }

    /* =========================================================
       users/{uid}  (profile + prefs + navbar)
    ========================================================== */
    match /users/{uid} {
      // Only you can read your user profile
      allow read: if isSignedIn() && request.auth.uid == uid;

      // Create/update/delete only yourself; uid must match; payload validated
      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid)
                    && validUserWrite();

      allow update: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid)
                    && validUserWrite();

      allow delete: if isSignedIn() && request.auth.uid == uid;
    }

    /* =========================================================
       pantryItems/{id}
    ========================================================== */
    match /pantryItems/{id} {
      function isExpired() {
        return resource.data.expiresAt != null
               && resource.data.expiresAt < request.time;
      }

      allow read: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if creatingAsSelf();
      allow update: if isSignedIn()
                    && resource.data.uid == request.auth.uid
                    && ownershipUnchanged()
                    && !isExpired();
      allow delete: if isSignedIn()
                    && resource.data.uid == request.auth.uid;
    }

    /* =========================================================
       recipes/{id} (+photos subcollection)
    ========================================================== */
    match /recipes/{id} {
      allow read: if true;

      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid;

      allow update: if isSignedIn()
                    && (
                         resource.data.uid == request.auth.uid
                      || resource.data.author.uid == request.auth.uid   // legacy support
                    )
                    && ownershipUnchanged();

      allow delete: if isSignedIn()
                    && (
                         resource.data.uid == request.auth.uid
                      || resource.data.author.uid == request.auth.uid
                    );

      match /photos/{pid} {
        allow read: if true;

        allow create, delete: if isSignedIn()
                               && (
                                    get(/databases/$(database)/documents/recipes/$(id)).data.uid == request.auth.uid
                                 || get(/databases/$(database)/documents/recipes/$(id)).data.author.uid == request.auth.uid
                               );

        allow update: if false;
      }
    }

    /* =========================================================
       users/{uid}/favoriteRecipes/{rid}
    ========================================================== */
    match /users/{uid}/favoriteRecipes/{rid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow create, delete: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
    }

    /* =========================================================
       posts/{postId} (+likes, +reposts, +comments)
    ========================================================== */
    match /posts/{postId} {
      allow read: if true;

      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid
                    && cleanOptional('text');

      allow update: if isSignedIn()
                    && resource.data.uid == request.auth.uid
                    && ownershipUnchanged();

      allow delete: if isSignedIn()
                    && resource.data.uid == request.auth.uid;

      match /likes/{uid} {
        allow read: if true;
        allow create, delete: if isSignedIn() && (
          request.auth.uid == uid ||
          request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
        );
        allow update: if false;
      }

      match /reposts/{uid} {
        allow read: if true;
        allow create, delete: if isSignedIn() && (
          request.auth.uid == uid ||
          request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
        );
        allow update: if false;
      }

      match /comments/{cid} {
        allow read: if true;

        allow create: if isSignedIn()
                      && request.resource.data.uid == request.auth.uid
                      && textOk();

        allow update: if isSignedIn()
                      && (
                           request.auth.uid == resource.data.uid ||
                           request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                         )
                      && (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid)
                      && textOk();

        allow delete: if isSignedIn()
                      && (
                           request.auth.uid == resource.data.uid ||
                           request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                         );
      }
    }

    /* =========================================================
       usernames/{uname}
    ========================================================== */
    match /usernames/{uname} {
      allow read: if true;

      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/usernames/$(uname))
                    && request.resource.data.uid == request.auth.uid;

      allow update, delete: if false;
    }
  }
}
