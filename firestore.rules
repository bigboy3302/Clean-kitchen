rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    /* ---------------------- helpers ---------------------- */

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // When creating top-level docs with a uid field
    function creatingAsSelf() {
      return isSignedIn() && request.resource.data.uid == request.auth.uid;
    }

    // Prevent changing ownership on update
    function ownershipUnchanged() {
      return !('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid;
    }

    function isClean(str) {
      return !(str.matches('(?i).*(\\b(fuck|shit|bitch|asshole|nigger|retard|cunt)\\b).*'));
    }

    function cleanOptional(field) {
      return !(field in request.resource.data) ||
             request.resource.data[field] == null ||
             isClean(request.resource.data[field]);
    }

    function textOk() {
      return !('text' in request.resource.data)
             || request.resource.data.text == null
             || (
                  request.resource.data.text is string
                  && request.resource.data.text.size() <= 25000
                  && isClean(request.resource.data.text)
                );
    }

    function isStr(v, max) { return v is string && v.size() <= max; }
    function isBool(v)     { return v is bool; }
    function isOneOf(v, list) { return list.hasAny([v]); }

    function listAllowedStrings(arr, allowed, maxLen) {
      return (arr is list) && arr.size() > 0 && arr.size() <= maxLen && arr.hasOnly(allowed);
    }

    function validUserWrite() {
      let new = request.resource.data;

      let baseOk =
        (new.username == null || new.username.matches('^[a-z0-9._-]{3,20}$')) &&
        (new.firstName == null || isStr(new.firstName, 100)) &&
        (new.lastName  == null || isStr(new.lastName,  100));

      let prefs = new.prefs;
      let prefsOk =
        (prefs == null) ||
        (
          (prefs.units == null || isOneOf(prefs.units, ["metric","imperial"])) &&
          (prefs.theme == null || isOneOf(prefs.theme, ["system","light","dark"])) &&
          (prefs.emailNotifications == null || isBool(prefs.emailNotifications)) &&
          (
            prefs.nav == null ||
            (
              (prefs.nav.placement == null || isOneOf(prefs.nav.placement, ["header","top","bottom","floating"])) &&
              (prefs.nav.accent    == null || isStr(prefs.nav.accent, 64)) &&
              (prefs.nav.icon      == null || isStr(prefs.nav.icon,   64)) &&
              (prefs.nav.compact   == null || isBool(prefs.nav.compact)) &&
              (prefs.nav.glow      == null || isBool(prefs.nav.glow)) &&
              (
                prefs.nav.order == null ||
                listAllowedStrings(
                  prefs.nav.order,
                  ["dashboard","pantry","recipes","fitness","profile"],
                  5
                )
              )
            )
          )
        );

      return baseOk && prefsOk;
    }

    /* ---------------------- users ---------------------- */

    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;

      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid)
                    && validUserWrite();

      allow update: if isSignedIn()
                    && request.auth.uid == uid
                    && (!('uid' in request.resource.data) || request.resource.data.uid == uid)
                    && validUserWrite();

      allow delete: if isSignedIn() && request.auth.uid == uid;
    }

    /* ---------------------- pantryItems ---------------------- */

    match /pantryItems/{id} {
      function isExpired() {
        return resource.data.expiresAt != null && resource.data.expiresAt < request.time;
      }
      allow read: if isSignedIn() && resource.data.uid == request.auth.uid;
      allow create: if creatingAsSelf();
      allow update: if isSignedIn()
                    && resource.data.uid == request.auth.uid
                    && ownershipUnchanged()
                    && !isExpired();
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid;
    }

    /* ---------------------- recipes (+ photos) ---------------------- */

    match /recipes/{id} {
      allow read: if true;

      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;

      allow update: if isSignedIn()
                    && (resource.data.uid == request.auth.uid ||
                        resource.data.author.uid == request.auth.uid)
                    && ownershipUnchanged();

      allow delete: if isSignedIn()
                    && (resource.data.uid == request.auth.uid ||
                        resource.data.author.uid == request.auth.uid);

      match /photos/{pid} {
        allow read: if true;
        allow create, delete: if isSignedIn()
                               && (
                                    get(/databases/$(database)/documents/recipes/$(id)).data.uid == request.auth.uid
                                 || get(/databases/$(database)/documents/recipes/$(id)).data.author.uid == request.auth.uid
                               );
        allow update: if false;
      }
    }

    /* ---------------------- favorite recipes ---------------------- */

    match /users/{uid}/favoriteRecipes/{rid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow create, delete: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
    }

    /* ---------------------- posts + social ---------------------- */

    match /posts/{postId} {
      allow read: if true;

      // Create: signed-in, writing as self, clean text if present
      allow create: if isSignedIn()
                    && request.resource.data.uid == request.auth.uid
                    && textOk()
                    && cleanOptional('text');

      // UPDATE: owner only, content-validated
      allow update: if isSignedIn()
                    && resource.data.uid == request.auth.uid
                    && ownershipUnchanged()
                    && textOk()
                    && cleanOptional('text');

      // DELETE: owner only (no request.resource on delete)
      allow delete: if isSignedIn()
                    && resource.data.uid == request.auth.uid;

      /* --- likes: /posts/{postId}/likes/{uid} --- */
      match /likes/{uid} {
        allow read: if true;

        // Create only if the doc id equals auth.uid AND the stored uid equals auth.uid
        allow create: if isSignedIn()
                      && uid == request.auth.uid
                      && request.resource.data.uid == request.auth.uid;

        // Only the owner of the like doc can delete it (unlike)
        allow delete: if isSignedIn() && uid == request.auth.uid;

        // No updates for like docs
        allow update: if false;
      }

      /* --- reposts: /posts/{postId}/reposts/{uid} --- */
      match /reposts/{uid} {
        allow read: if true;

        // One marker per user; enforce id == auth.uid and body.uid == auth.uid
        allow create: if isSignedIn()
                      && uid == request.auth.uid
                      && request.resource.data.uid == request.auth.uid;

        // Allow removing your own repost
        allow delete: if isSignedIn() && uid == request.auth.uid;

        allow update: if false;
      }

      /* --- comments: /posts/{postId}/comments/{commentId} --- */
      match /comments/{commentId} {
        allow read: if true;

        // commenter must be signed in and writing as self
        allow create: if isSignedIn()
                      && request.resource.data.uid == request.auth.uid
                      && textOk()
                      && cleanOptional('text');

        // comment author OR post owner can delete
        allow delete: if isSignedIn()
                      && (
                           request.auth.uid == resource.data.uid ||
                           request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                         );

        // Updates not allowed (keeps it simple)
        allow update: if false;

        /* --- replies: /posts/{postId}/comments/{commentId}/replies/{replyId} --- */
        match /replies/{replyId} {
          allow read: if true;

          // replier must be signed in and writing as self
          allow create: if isSignedIn()
                        && request.resource.data.uid == request.auth.uid
                        && textOk()
                        && cleanOptional('text');

          // reply author OR post owner can delete
          allow delete: if isSignedIn()
                        && (
                             request.auth.uid == resource.data.uid ||
                             request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
                           );

          allow update: if false;
        }
      }

      /* --- reports: /posts/{postId}/reports/{uid} --- */
      match /reports/{uid} {
        allow read: if false; // keep private
        allow create: if isSignedIn()
                      && uid == request.auth.uid
                      && request.resource.data.uid == request.auth.uid;
        allow delete: if isSignedIn() && uid == request.auth.uid;
        allow update: if false;
      }
    }

    /* ---------------------- usernames ---------------------- */

    match /usernames/{uname} {
      allow read: if true;
      allow create: if isSignedIn()
                    && !exists(/databases/$(database)/documents/usernames/$(uname))
                    && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
