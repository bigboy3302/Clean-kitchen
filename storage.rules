rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    /* ---------- helpers ---------- */
    function isSignedIn() { return request.auth != null; }
    function isImage()    { return request.resource.contentType.matches('image/.*'); }
    function isVideo()    { return request.resource.contentType.matches('video/.*'); }
    function sizeUnder(n) { return request.resource.size < n; }

    /* ---------- avatars ---------- */
    match /avatars/{uid}/{allPaths=**} {
      allow read: if true;
      allow write, delete, list: if isSignedIn() && request.auth.uid == uid;
    }

    /* ---------- post media: posts/{uid}/{postId}/{filename} ---------- */
    match /posts/{uid}/{postId}/{filename} {
      allow read: if true; // make private by switching to isSignedIn()

      // only post owner uploads; images ≤20MB, videos ≤100MB
      allow create: if isSignedIn()
                    && request.auth.uid == uid
                    && (
                         (isImage() && sizeUnder(20 * 1024 * 1024)) ||
                         (isVideo() && sizeUnder(100 * 1024 * 1024))
                       );

      allow delete: if isSignedIn() && request.auth.uid == uid;
      allow update: if false;
      // allow list: if false; // optional
    }

    /* ---------- comment media: posts/{postId}/comments/{commentId}/{filename} ---------- */
    match /posts/{postId}/comments/{commentId}/{filename} {
      allow read: if true;

      // only that comment's author can upload images/GIFs ≤10MB
      allow create: if isSignedIn()
                    && isImage()
                    && sizeUnder(10 * 1024 * 1024)
                    && exists(/databases/(default)/documents/posts/$(postId)/comments/$(commentId))
                    && get(/databases/(default)/documents/posts/$(postId)/comments/$(commentId)).data.uid == request.auth.uid;

      // allow delete by comment author OR original post author
      allow delete: if isSignedIn()
                    && exists(/databases/(default)/documents/posts/$(postId)/comments/$(commentId))
                    && (
                         get(/databases/(default)/documents/posts/$(postId)/comments/$(commentId)).data.uid == request.auth.uid ||
                         get(/databases/(default)/documents/posts/$(postId)).data.uid == request.auth.uid
                       );

      allow update: if false;
      // allow list: if false; // optional
    }

    /* ---------- recipe images ---------- */
    match /recipeImages/{uid}/{recipeId}/{fileId=**} {
      allow read: if isSignedIn();
      allow write, delete, list: if isSignedIn() && request.auth.uid == uid;
    }

    /* ---------- legacy (optional) ---------- */
    match /recipes/{uid}/{recipeId}/{allPaths=**} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == uid;
      allow delete, update: if isSignedIn() && request.auth.uid == uid;
    }

    /* ---------- deny everything else ---------- */
    match /{allOtherPaths=**} {
      allow read, write: if false;
    }
  }
}
