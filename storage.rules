rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Tikai pats lietotājs var lasīt/rakstīt savus failus
    match /user_uploads/{uid}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Publiski attēli (ja vajag)
    match /public/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  // Cover image (single file)
    match /recipeImages/{uid}/{recipeId} {
      allow read: if true;
      allow write: if request.auth != null
        && request.auth.uid == uid
        && exists(/databases/(default)/documents/recipes/$(recipeId))
        && get(/databases/(default)/documents/recipes/$(recipeId)).data.uid == uid;
    }

    // Gallery images
    match /recipeImages/{uid}/{recipeId}/gallery/{fileName} {
      allow read: if true;
      allow write: if request.auth != null
        && request.auth.uid == uid
        && exists(/databases/(default)/documents/recipes/$(recipeId))
        && get(/databases/(default)/documents/recipes/$(recipeId)).data.uid == uid;
    }
    // Avatars are stored at avatars/{uid}/avatar.jpg (or any filename).
    match /avatars/{uid}/{allPaths=**} {
      // Owner can read/write.
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // (Optional) if you already have other public folders, keep them here.
    // getDownloadURL() returns a tokenized URL that works publicly once generated.
    // You only need read access above to obtain that URL at upload time.
  }
}

