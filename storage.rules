rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function isSignedIn() { return request.auth != null; }

    function isRecipeOwner(recipeId) {
      return isSignedIn()
        && exists(/databases/(default)/documents/recipes/$(recipeId))
        && get(/databases/(default)/documents/recipes/$(recipeId)).data.uid == request.auth.uid;
    }

    /* avatars */
    match /avatars/{uid}/{allPaths=**} {
      allow read: if true;
      allow write, delete, list: if isSignedIn() && request.auth.uid == uid;
    }

    /* posts media */
    match /posts/{uid}/{postId}/{allPaths=**} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == uid
                   && request.resource.size < 200 * 1024 * 1024
                   && (request.resource.contentType.matches('image/.*') ||
                       request.resource.contentType.matches('video/.*'));
    }

    /* recipe images */
    match /recipeImages/{uid}/{recipeId}/{fileId=**} {
      allow read: if isSignedIn();
      allow write, delete, list: if isSignedIn() && request.auth.uid == uid;
    }

    /* legacy back-compat (optional) */
    match /recipes/{uid}/{recipeId}/{allPaths=**} {
      allow read: if true;
      allow write: if isRecipeOwner(recipeId) && request.auth.uid == uid;
    }

    match /{allOtherPaths=**} {
      allow read, write: if false;
    }
    match /posts/{postId} {
      allow read: if true;

      // post owner can update/delete their post
      allow update, delete: if request.auth != null &&
                            request.auth.uid == resource.data.uid;
      // anyone signed-in can create a post
      allow create: if request.auth != null;

      // Likes: one doc per user (doc id = uid)
      match /likes/{uid} {
        allow read: if true;
        allow create: if request.auth != null
                      && request.auth.uid == uid
                      && !exists(/databases/$(database)/documents/posts/$(postId)/likes/$(uid));
        allow delete: if request.auth != null && request.auth.uid == uid;
        allow update: if false;
      }

      // Reposts: one doc per user (doc id = uid)
      match /reposts/{uid} {
        allow read: if true;
        allow create: if request.auth != null
                      && request.auth.uid == uid
                      && !exists(/databases/$(database)/documents/posts/$(postId)/reposts/$(uid));
        allow delete: if request.auth != null && request.auth.uid == uid;
        allow update: if false;
      }

      // Comments: owner of comment OR owner of post can delete
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (
          request.auth.uid == resource.data.uid ||
          request.auth.uid == get(/databases/$(database)/documents/posts/$(postId)).data.uid
        );
        allow update: if false;
      }

      // Reports: 1 doc per user
      match /reports/{uid} {
        allow read: if false;
        allow create: if request.auth != null && request.auth.uid == uid;
        allow update, delete: if false;
      }
    
  }
}
