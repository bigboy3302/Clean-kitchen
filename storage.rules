rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function isSignedIn() { return request.auth != null; }

    function isRecipeOwner(recipeId) {
      return isSignedIn()
        && exists(/databases/(default)/documents/recipes/$(recipeId))
        && get(/databases/(default)/documents/recipes/$(recipeId)).data.uid == request.auth.uid;
    }

    /* avatars */
    match /avatars/{uid}/{allPaths=**} {
      allow read: if true;
      allow write, delete, list: if isSignedIn() && request.auth.uid == uid;
    }

    /* posts media */
    match /posts/{uid}/{postId}/{allPaths=**} {
      allow read: if true;
      allow write: if isSignedIn() && request.auth.uid == uid
                   && request.resource.size < 200 * 1024 * 1024
                   && (request.resource.contentType.matches('image/.*') ||
                       request.resource.contentType.matches('video/.*'));
    }

    /* recipe images */
    match /recipeImages/{uid}/{recipeId}/{fileId=**} {
      allow read: if isSignedIn();
      allow write, delete, list: if isSignedIn() && request.auth.uid == uid;
    }

    /* legacy back-compat (optional) */
    match /recipes/{uid}/{recipeId}/{allPaths=**} {
      allow read: if true;
      allow write: if isRecipeOwner(recipeId) && request.auth.uid == uid;
    }

    match /{allOtherPaths=**} {
      allow read, write: if false;
    }
    // Anyone can read posts; writes only by owner
    match /posts/{postId} {
      allow read: if true;

      // Only the post owner can update or delete the post itself
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.uid == request.auth.uid;

      // ----- Likes subcollection -----
      match /likes/{uid} {
        allow read: if true;
        // user can like/unlike using their own uid as doc id
        allow create, update, delete: if request.auth != null && uid == request.auth.uid;
      }

      // ----- Reposts subcollection -----
      match /reposts/{uid} {
        allow read: if true;
        // user can (un)repost using their own uid as doc id
        allow create, update, delete: if request.auth != null && uid == request.auth.uid;
      }

      // ----- Comments subcollection -----
      match /comments/{commentId} {
        allow read: if true;

        // create: any signed-in user
        allow create: if request.auth != null;

        // delete: comment owner or post owner
        allow delete, update: if request.auth != null
          && (resource.data.uid == request.auth.uid || get(/databases/$(database)/documents/posts/$(postId)).data.uid == request.auth.uid);

        // ----- Replies under a comment -----
        match /replies/{replyId} {
          allow read: if true;
          // any signed-in user can add a reply
          allow create: if request.auth != null;
          // delete: reply owner or post owner
          allow delete, update: if request.auth != null
            && (resource.data.uid == request.auth.uid || get(/databases/$(database)/documents/posts/$(postId)).data.uid == request.auth.uid);
        }
      }
    }
  }
}
